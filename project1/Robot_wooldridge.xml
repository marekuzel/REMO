<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.
int height = 2;
int width = 2;
int world[3][3] = {{1,1,0},{1,0,0}, {0,0,0}};

//wining condition
int win [3][3] = {{1,1,1},{1,1,1},{1,1,1}};

//robots coordinates
int x = 1;
int y = 0;

//state memory
int mem[4][3][3] = {{{1,1,0},{0,0,0}, {0,0,0}},{{1,0,0},{1,0,0}, {0,0,0}},{{0,0,0},{0,0,0}, {0,0,0}}, {{0,0,0},{0,0,0}, {0,0,0}}};

// 0 is equivalent to facing north
// 1 is equivalent to facing east
// 2 is equivalent to facing south
// 3 is equivalent to facing west
int facing = 1;
</declaration>
	<template>
		<name x="9" y="9">Robot</name>
		<declaration>int count = 0;


//bool contains(const mem &amp;, int x, int y, int face)
//{
//  return (exists(i:1000) mem[i][0]==x &amp;&amp; mem[i][1]==y &amp;&amp; mem[i][2] == face);
//}
</declaration>
		<location id="id0" x="-59" y="0">
		</location>
		<location id="id1" x="-365" y="-25">
		</location>
		<location id="id2" x="59" y="42">
		</location>
		<init ref="id0"/>
		<transition id="id3">
			<source ref="id2"/>
			<target ref="id0"/>
		</transition>
		<transition id="id4">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="assignment" x="-314" y="-34">world[y][x] = 1,
count += 1,
mem[facing][x][y] += 1</label>
		</transition>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-688" y="-110">(facing == 3)&amp;&amp;(x &gt;= 1)</label>
			<label kind="assignment" x="-620" y="-85">x -= 1</label>
			<nail x="-68" y="-8"/>
			<nail x="-68" y="-323"/>
			<nail x="-595" y="-263"/>
		</transition>
		<transition id="id6">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-518" y="187">(facing == 2)&amp;&amp;(y&lt;= height-1)</label>
			<label kind="assignment" x="-501" y="204">y += 1</label>
			<nail x="-365" y="213"/>
			<nail x="-442" y="119"/>
			<nail x="-442" y="119"/>
		</transition>
		<transition id="id7">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="assignment" x="213" y="-25">facing = (facing += 1)%4,
count+=1,
mem[facing][x][y] += 1</label>
			<nail x="204" y="-110"/>
			<nail x="196" y="94"/>
			<nail x="76" y="51"/>
		</transition>
		<transition id="id8">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-255" y="102">facing == 1 &amp;&amp; x &lt;= width - 1</label>
			<label kind="assignment" x="-229" y="119">x += 1</label>
			<nail x="-170" y="60"/>
			<nail x="-331" y="102"/>
			<nail x="-357" y="-8"/>
		</transition>
		<transition id="id9">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-348" y="-144">facing == 0 &amp;&amp; y &gt;= 1</label>
			<label kind="assignment" x="-263" y="-110">y -= 1</label>
			<nail x="-93" y="-68"/>
			<nail x="-93" y="-68"/>
			<nail x="-221" y="-119"/>
		</transition>
	</template>
	<template>
		<name>win_check</name>
		<declaration>bool memCheck() {
    for (face : int[0,3]) {
        for (x : int[0,2]) {
            for (y : int[0,2]) {
                if (mem[face][x][y] &gt; 1) {
                    return false;
                }
            }
        }
    }
    return true; 
}</declaration>
		<location id="id10" x="0" y="0">
		</location>
		<location id="id11" x="187" y="17">
			<name x="177" y="-17">winning_state</name>
		</location>
		<init ref="id10"/>
		<transition id="id12">
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="-17" y="59">(world == win)&amp;&amp;(x==0)&amp;&amp;(y==2)&amp;&amp;memCheck()!= false &amp;&amp; facing == 0</label>
		</transition>
		<transition id="id13">
			<source ref="id10"/>
			<target ref="id10"/>
			<label kind="guard" x="-92" y="-148">world != win</label>
			<nail x="-110" y="-229"/>
			<nail x="85" y="-187"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
P_1 = Robot();
P_w = win_check();
// List one or more processes to be composed into a system.
system P_1, P_w;
</system>
	<queries>
		<query>
			<formula>E&lt;&gt;P_w.winning_state</formula>
			<comment/>
			<option key="--diagnostic" value="1"/>
		</query>
	</queries>
</nta>
